import sys
import os
import tensorflow as tf
import numpy as np
import copy

sys.path.append('../')

from src.experiment import Experiment
from src.data.t_metrics import save_to_file, print_results


try:
    task_id = int(os.environ['SLURM_ARRAY_TASK_ID'])
except KeyError:
    print('NO SLURM TASK ID FOUND')
    print('Using ID 0 instead')
    task_id = 0

runs = 2
incremental_learning = False
save_results=True
datam = None
#samplingop = ['l_sampling', 'g_sampling', 'l_sampling', 'l_sampling'] * 2
sampling_op = [['l_reparam'], ['l_reparam', 'ste'], ['l_reparam'],['c_reparam'], ['c_reparam', 'ste']][task_id]

tau = .5

#discrete_act = [[], ['i'], ['c'], ['o'], ['i', 'c'], ['i', 'o'], ['c', 'o'], ['i', 'c', 'o']][task_id]
#batchnorm = ['fc', 'x+fc', 'h+fc', 'x+h+fc', 'none'][task_id]
discrete_act = [['c','o'], ['c', 'o'], [], [], []][task_id]
batchnorm = []
lr = .02
lr_tau = [7000, 7000, 1500, 1500, 1500][task_id]
epochs = [20000, 20000, 5000, 5000, 5000][task_id]
layout = [30, 30]
load_file = 'si_70_70'
pretrain_mode = ['load', 'disable', 'create'][0]

filename = 'exp'
parametrization = 'sigmoid'
lr_adapt = False

timit_dataset = ['timit_tr_small_0', 'timit_va_small_0']
timit_s_dataset = ['timit_tr_s_0', 'timit_va_s_0']
timit_l_dataset = ['timit_tr_l_0', 'timit_va_l_0']
# timit: 13 -> 54
# penstroke: 4 -> 10
labelled_data_config = {'dataset': 'sign',
                        'tr': {'in_seq_len': 70,
                               'minibatch_enabled': True,
                               'minibatch_size': 1000,
                               'max_truncation': 10},
                        'va': {'in_seq_len': 70,
                               'minibatch_enabled': True,
                               'minibatch_size': 1000,
                               'max_truncation': 10},
                        'te': {'in_seq_len': 70,
                               'minibatch_enabled': True,
                               'minibatch_size': 1000,
                               'max_truncation': 10}}

priors = [[0.2, 0.6, 0.2],[0.1, 0.8, 0.1]]
input_config = {'layer_type': 'input'}
b_config = {'init_m': 'zeros', 'prior_m': 0., 'init_v': -4.5, 'prior_v': 0., 'type': 'continuous'}
bf_config = {'init_m': 'ones', 'prior_m': 1., 'init_v': -4.5, 'prior_v': 0., 'type': 'continuous'}
w_config = {'parametrization': 'sigmoid', 'priors': priors[1], 'type': 'ternary', 'pmin': .01, 'pmax':.99, 'p0min': .05, 'p0max': .95}
w_config = {'parametrization': 'sigmoid', 'priors': priors[1], 'type': 'ternary', 'pmin': .01, 'pmax':.99, 'p0min': .05, 'p0max': .95}

hidden_2_config = {'layer_type': 'lstm',
                   'var_scope': 'lstm_1',
                   'parametrization': parametrization,
                   'tau': tau,
                   'discrete_act': discrete_act,
                   'lr_adapt': lr_adapt,
                   'wf': w_config,
                   'bf': bf_config,
                   'wi': w_config,
                   'bi': b_config,
                   'wc': w_config,
                   'bc': b_config,
                   'wo': w_config,
                   'bo': b_config}

hidden_1_config = copy.deepcopy(hidden_2_config)
hidden_1_config['var_scope'] = 'lstm_0'

output_config = {'layer_type': 'fc',
                 'var_scope': 'output_layer',
                 'parametrization': parametrization,
                 'tau': tau,
                 'lr_adapt': lr_adapt,
                 'regularization': {'mode': None,
                                    'strength': 0.02},
                 'w': w_config,
                 'b': b_config}

rnn_config = {'layout': [22, layout[0], layout[1], 96],
              'act_disc': discrete_act,
              'layer_configs': [input_config, hidden_1_config, hidden_2_config, output_config],
              'gradient_clip_value': .5,
              'output_type': 'classification',
              'data_multiplier': datam} 


training_config = {'learning_rate': lr, 
                   'learning_rate_tau': lr_tau,
                   'tau': tau,
                   'algorithm': sampling_op,
                   'is_pretrain': False,
                   'batchnorm': {'modes': batchnorm,
                                 'type': 'none',
                                 'momentum': .98,
                                 'tau': 1},
                   'var_reg': 0.,
                   'ent_reg': 0.,
                   'dir_reg': 0., 
                   'mode': {'name': 'inc_lengths',
                            'in_seq_len': [4, 8, 15, 40],
                            'max_truncation': [41, 37, 25, 5],
                            'min_errors': [0., 0., 0., 0.],
                            'max_epochs': [100, 500, 4400, 20000]},
                   'task_id': task_id}

if incremental_learning is False:
    training_config['mode'] = {'name': 'classic', 'min_error': 0., 'max_epochs': epochs} 
pretrain_config = copy.deepcopy(training_config)


pretrain_config['is_pretrain'] = True
pretrain_config['mode'] = {'name': 'inc_lengths',
                           'in_seq_len': [1, 2, 4, 8, 30],
                           'min_errors': [0., 0., 0., 0., 0.],
                           'max_epochs': [3, 10, 20, 50, 200]}
#pretrain_config['mode']['max_epochs'] = 10

pretrain_config['mode'] = {'name': 'classic', 'min_error': 0., 'max_epochs': 200} 
pretrain_config['reg'] = 0.02
pretrain_config['path'] = load_file
pretrain_config['status'] = pretrain_mode


info_config = {'calc_performance_every': 1,
               'cell_access': False,
               'save_weights': {'save_every': np.inf,
                                'save_best': False,
                                'path': '../m/w/' + filename + '_' + str(task_id)},
               'tensorboard': {'enabled': save_results, 'path': '../si/tb/' + filename + '_' + str(task_id), 'period': 200,
                               'weights': True, 'gradients': False, 'results': True, 'acts': True, 'single_acts': 1},
               'profiling': {'enabled': False, 'path': '../profiling/' + filename}, 
               'timer': {'enabled': False}}
               

result_config = {'save_results': save_results,
                 'path': '../si/nr/' + filename + '_' + str(task_id),
                 'plot_results': False,
                 'print_final_stats': True}

result_dicts = []
for run in range(runs):
    experiment = Experiment()
    result_dicts.append(experiment.train(rnn_config, labelled_data_config, training_config, pretrain_config, info_config, run))
print('----------------------------')
if result_config['save_results']:
    save_to_file(result_dicts, result_config['path'])
print_results(result_dicts)


